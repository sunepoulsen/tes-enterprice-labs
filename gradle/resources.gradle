import org.apache.tools.ant.filters.ReplaceTokens

def readPasswordFromFile(String filename) {
    def file = new File("${project.rootDir.absolutePath}/build/secrets/${filename}")
    def password = 'null'
    if (file.exists()) {
        password = file.text.trim()
        if (password.endsWith('\n')) {
            password = password.substring(0, password.length()-1)
        }
    }

    return password.toString()
}

def resourceProperties = [
    // Project properties
    projectName: project.name.toString(),
    projectBuildDir: "${project.projectDir.absolutePath}/build".toString(),
    version: project.property('version').toString(),

    // Docker Image properties
    telTestDataDockerImageName: project.property('tel-testdata.docker.image.name').toString(),
    telWebDockerImageName: project.property('tel-web.docker.image.name').toString(),
    databaseImage: project.property('database.image.name').toString(),
    databaseTag: project.property('database.image.tag').toString(),

    // HTTPS Certificate properties
    certificateDirectory: "${project.rootDir.absolutePath}/build/secrets".toString(),
    certificateFile: "${project.rootDir.absolutePath}/build/secrets/tes-enterprise-labs.p12".toString(),
    certificateFilename: 'tes-enterprise-labs.p12'.toString(),
    certificatePemFilename: 'tes-enterprise-labs.pem'.toString(),
    certificateKeyFilename: 'tes-enterprise-labs.key'.toString(),
    certificatePasswordFilename: 'tes-enterprise-labs-password.txt'.toString(),
    certificatePassword: readPasswordFromFile('tes-enterprise-labs-password.txt'),

    // Properties for databases
    databaseSuperUserPassword: readPasswordFromFile('database-super-user-password.txt'),
    telTestDataDatabase: 'tel_testdata',
    telTestDataAdminUsername: 'tel_testdata_adm',
    telTestDataAdminPassword: readPasswordFromFile('tel-testdata-admin-password.txt'),
    telTestDataApplicationUsername: 'tel_testdata_app',
    telTestDataApplicationPassword: readPasswordFromFile('tel-testdata-application-password.txt'),
]

processResources {
    filter(ReplaceTokens, tokens: resourceProperties)
}

processTestResources {
    filter(ReplaceTokens, tokens: resourceProperties)
}
